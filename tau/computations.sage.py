

# This file was *autogenerated* from the file computations.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_5 = Integer(5); _sage_const_8 = Integer(8); _sage_const_3 = Integer(3); _sage_const_6 = Integer(6); _sage_const_2 = Integer(2); _sage_const_10 = Integer(10); _sage_const_7 = Integer(7); _sage_const_20 = Integer(20); _sage_const_200 = Integer(200); _sage_const_100 = Integer(100); _sage_const_50 = Integer(50); _sage_const_40 = Integer(40); _sage_const_11 = Integer(11)
load('tests.sage')

# Diamond Necklace Definition
def diamond_necklace(t,a):
    b = RR(_sage_const_1 /_sage_const_5  * (_sage_const_1 /t - a))
    es = []
    v = '00'
    vs = [v]
    for i in range(t - _sage_const_1 ):
        vs += [str(i) + '1', str(i) + '2', str(i) + '3']
        vs += [str(i + _sage_const_1 ) + '0']
        es += [(str(i) + '0', str(i) + '1', a),
               (str(i) + '1', str(i) + '2', b),
               (str(i) + '1', str(i) + '3', b),
               (str(i) + '2', str(i) + '3', b),
               (str(i + _sage_const_1 ) + '0', str(i) + '2', b),
               (str(i + _sage_const_1 ) + '0', str(i) + '3', b)]
    n = t - _sage_const_1 
    vs += [str(n) + '1', str(n) + '2', str(n) + '3']
    es += [(str(n) + '0', str(n) + '1', a),
           (str(n) + '1', str(n) + '2', b),
           (str(n) + '1', str(n) + '3', b),
           (str(n) + '2', str(n) + '3', b),
           ('00', str(n) + '2', b),
           ('00', str(n) + '3', b)]
    G = Graph(es)
    G.relabel()
    return(G)

# Computations:
if True:
    # Complete Graphs
    for n in range(_sage_const_5 ,_sage_const_8 ):
        G = graphs.CompleteGraph(n)
        print("Complete graph on %i vertices"%n)
        test(G)
        print()

if True:
    # Complete Bipartite Graph
    for n in range(_sage_const_3 ,_sage_const_6 ):
        G = graphs.CompleteBipartiteGraph(n,n)
        print("Complete bipartite graph on (%i , %i) vertices"%(n,n))
        test(G)
        print()

if True:
    # Ladder Graphs
    for n in range(_sage_const_3 ,_sage_const_6 ):
        G = graphs.GridGraph([_sage_const_2 ,n])
        G.relabel()
        print("Ladder graph with %i rows"%n)
        test(G)
        print()

if True:
    # 2d Grid Graphs
    for n in range(_sage_const_3 ,_sage_const_6 ):
        G = graphs.GridGraph([n,n])
        G = delete_two_degrees(G)
        G.relabel()
        print("2d Grid graph with %i rows and columns"%n)
        test(G)
        print()

if True:
    # 3d Grid Graphs
    for n in range(_sage_const_3 ,_sage_const_6 ):
        G = graphs.GridGraph([n,n,n])
        G = delete_two_degrees(G)
        G.relabel()
        print("3d Grid graph with %i rows and columns"%n)
        test(G)
        print()

if True:
    # Wheel Graphs
    for n in range(_sage_const_3 ,_sage_const_10 ):
        G = graphs.WheelGraph(n)
        G.relabel()
        print("Wheel graph with %i spokes"%n)
        test(G)
        print()

if True:
    # Petersen Graph
    G = graphs.PetersenGraph()
    G.relabel()
    print("Petersen Graph")
    test(G)
    print()

if True:
    # Cube Graph
    for n in range(_sage_const_3 ,_sage_const_7 ):
        G = graphs.CubeGraph(n)
        G.relabel()
        print("Cube Graph, dimension = ", n)
        test(G)
        print()

if True:
    # Octahedral Graph
    G = graphs.OctahedralGraph()
    G.relabel()
    print("Octahedral Graph")
    test(G)
    print()

if True:
    # Tetrahedral Graph
    G = graphs.TetrahedralGraph()
    G.relabel()
    print("Tetrahedral Graph")
    test(G)
    print()

if True:
    # Dodecahedral Graph
    G = graphs.DodecahedralGraph()
    G.relabel()
    print("Dodecahedral Graph")
    test(G)
    print()

if False:
    # Diamond Necklace
    t = _sage_const_20 
    if False:
        for a in [RR(_sage_const_1 /_sage_const_200 ), RR(_sage_const_1 /_sage_const_100 ), RR(_sage_const_1 /_sage_const_50 ), RR(_sage_const_1 /_sage_const_20 )]:
            print("Diamond Necklace with t = %i and a = %f"% (t,a))
            G = diamond_necklace(t,a)
            print("tau = ", tau(G))
    print("Diamond Necklace with t = %i"%t)
    test(G)
    print()
    t = _sage_const_40 
    print("Diamond Necklace with t = %i"%t)
    G = diamond_necklace(t,_sage_const_1 )
    test(G)
    print()

# All graphs
if False:
    K = _sage_const_11 
    print("Testing Convexity for all graphs up to %i vertices"%K)
    convexity = True
    for k in range(_sage_const_3 ,K):
        for G in graphs.nauty_geng('-c ' + str(k)):
            if not tau_test_convexity(G):
                convexity = False
                print("Convexity test failed:")
                show(G)
                break
        if not convexity:
            break
        print("verified for %i vertices"%k)


