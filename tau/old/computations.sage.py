

# This file was *autogenerated* from the file computations.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_10 = Integer(10); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_7 = Integer(7); _sage_const_12 = Integer(12); _sage_const_300 = Integer(300); _sage_const_6 = Integer(6); _sage_const_100 = Integer(100)
load('tau.sage')

print("Computations Output: \n")

# Complete Graphs
# TODO TRUE
if False:
    print("Complete Graph computation")
    for n in range(_sage_const_4 ):
        print("n = %n :"%n)
        G = graphs.CompleteGraph(n + _sage_const_3 )
        print("Tau convexity = ", tau_test_convexity(G))
#OUTPUT ALL TRUE

if True:
    G = graphs.CompleteGraph(_sage_const_5 )
    i = _sage_const_3 
    polys = subdivide(G,i)
    print("n = %i :"%i)
    print("Tau convexity = ", tau_test_convexity(G))


# Block Tower Graph TODO CITE
if False:
    T = {}
    R = {}
    Dif = {}
    for n in range(_sage_const_4 ,_sage_const_10 ):
        P = graphs.PathGraph(n)
        C = graphs.CycleGraph(_sage_const_4 )
        G = P.cartesian_product(C)
        G.relabel()
        for e in G.edges():
            G.set_edge_label(e[_sage_const_0 ],e[_sage_const_1 ],_sage_const_1 )
        T[n] = N(tau(G,QQ))
        R[n] = N(res(_sage_const_0 ,_sage_const_4 *n - _sage_const_2 ,G,QQ))
        if len(R) > _sage_const_1 :
            Dif[n] = R[n] - R[n-_sage_const_1 ]
        else:
            Dif[n] = R[n]

if False:
    P = graphs.PathGraph(_sage_const_4 )
    C = graphs.CycleGraph(_sage_const_4 )
    G = P.cartesian_product(C)
    polys = PolynomialRing(QQ,_sage_const_3 ,"z").fraction_field()
    z = polys.gens()
    for i in range(_sage_const_4 ):
        for k in range(_sage_const_4 ):
            if k < _sage_const_3 :
                G.set_edge_label((k,i),(k+_sage_const_1 ,i), z[_sage_const_1 ])
            if i < _sage_const_3 :
                G.set_edge_label((k,i),(k,i+_sage_const_1 ), z[_sage_const_2 ])
            G.set_edge_label((k,_sage_const_3 ),(k,_sage_const_0 ), z[_sage_const_2 ])
    for i in range(_sage_const_3 ):
        G.set_edge_label((_sage_const_0 ,i),(_sage_const_0 ,i+_sage_const_1 ), z[_sage_const_0 ])
    G.set_edge_label((_sage_const_0 ,_sage_const_3 ),(_sage_const_0 ,_sage_const_0 ), z[_sage_const_0 ])
    G.relabel()
    F = fosters(G)
    p = tau(G,F,polys)

# Square Lattice Graph
# TODO TRUE
if False:
    print("Square Grid Graph")
    for n in range(_sage_const_2 ,_sage_const_5 ):
        print("n = ",n)
        G = graphs.Grid2dGraph(n,n)
        print("Tau convexity = ",tau_test_convexity(G))
#OUTPUT ALL TRUE

# Ladder Graph
# TODO TRUE
if False:
    print("Ladder Graph")
    for n in range(_sage_const_2 ,_sage_const_7 ):
        G = graphs.LadderGraph(n)
        print("n = ", n)
        print("Tau Convexity = ", tau_test_convexity(G))
#OUTPUT ALL TRUE

# Banana Graph
if False:
    answer = []
    answer_with_fosters = []
    f = []
    p = []
    for edge_num in range(_sage_const_3 ,_sage_const_10 ):
        polys = PolynomialRing(QQ,edge_num,"z").fraction_field()
        z = polys.gens()
        G = Graph([(_sage_const_0 , _sage_const_1 , _sage_const_1 /edge_num) for i in range(edge_num)])
        p += [tau(G,polys)]
        answer += [_sage_const_1 /_sage_const_12 *(_sage_const_1  - (_sage_const_2 *edge_num - _sage_const_4 )/edge_num**_sage_const_2 )]
    #testing tau_with_fosters
    for edge_num in range(_sage_const_3 ,_sage_const_10 ):
        polys = PolynomialRing(QQ,edge_num,"z").fraction_field()
        z = polys.gens()
        G = Graph([(_sage_const_0 , _sage_const_1 , _sage_const_1 /edge_num) for i in range(edge_num)])
        p += [tau_using_fosters(G)]
        answer_with_fosters += [_sage_const_1 /_sage_const_12 *(_sage_const_1  - (_sage_const_2 *edge_num - _sage_const_4 )/edge_num**_sage_const_2 )]

# Banana graph on three edges
if False:
    edge_num = _sage_const_3 
    polys = PolynomialRing(QQ,edge_num,"z").fraction_field()
    z = polys.gens()
    G = Graph([(_sage_const_0 , _sage_const_1 , z[_sage_const_0 ]), (_sage_const_0 ,_sage_const_1 ,z[_sage_const_1 ]), (_sage_const_0 ,_sage_const_1 ,z[_sage_const_2 ])])
    p = tau(G, polys)
    var('x, y')
    S = {z[_sage_const_0 ]:x,z[_sage_const_1 ]:y,z[_sage_const_2 ]:_sage_const_1 -x-y}
    f = p.substitute(S)
    graphic = contour_plot(f, (x,_sage_const_0 ,_sage_const_1 ), (y,_sage_const_0 ,_sage_const_1 ), fill=False, region=_sage_const_1 -x-y,plot_points=_sage_const_300 )
    show(graphic)

# Cube Graph
if False:
    dimensions = _sage_const_3 
    edge_num = dimensions * _sage_const_2 **dimensions / _sage_const_2 
    polys = PolynomialRing(QQ,edge_num,"z").fraction_field()
    var('x,y')
    z = polys.gens()
    G = Graph([(_sage_const_0 , _sage_const_1 , z[_sage_const_0 ]),
     (_sage_const_0 , _sage_const_2 , z[_sage_const_1 ]),
     (_sage_const_0 , _sage_const_4 , z[_sage_const_2 ]),
     (_sage_const_1 , _sage_const_3 , z[_sage_const_2 ]),
     (_sage_const_1 , _sage_const_5 , z[_sage_const_1 ]),
     (_sage_const_2 , _sage_const_3 , z[_sage_const_0 ]),
     (_sage_const_2 , _sage_const_6 , z[_sage_const_2 ]),
     (_sage_const_3 , _sage_const_7 , z[_sage_const_1 ]),
     (_sage_const_4 , _sage_const_5 , z[_sage_const_0 ]),
     (_sage_const_4 , _sage_const_6 , z[_sage_const_1 ]),
     (_sage_const_5 , _sage_const_7 , z[_sage_const_2 ]),
     (_sage_const_6 , _sage_const_7 , z[_sage_const_0 ])])
    p = tau(G,polys)
    f = p.substitute({z[_sage_const_0 ]:x, z[_sage_const_1 ]:y, z[_sage_const_2 ]:_sage_const_1 /_sage_const_4 -x-y})
    graphic = contour_plot(f, (x,_sage_const_0 ,_sage_const_1 /_sage_const_4 ), (y,_sage_const_0 ,_sage_const_1 /_sage_const_4 ), fill=False,
                           region=_sage_const_1 /_sage_const_4 -x-y, plot_points=_sage_const_300 )
    show(graphic)

# Cube Graph
# TODO TRUE
if False:
    print("Cube Graph")
    for n in range(_sage_const_2 ,_sage_const_5 ):
        print("n = ",n)
        G = graphs.CubeGraph(n)
        print("Tau convexity = ",tau_test_convexity(G))

# Petersen Graph
# TODO TRUE
if False:
    G = graphs.PetersenGraph()
    print("Petersen Graph on n variables:")
    for n in range(_sage_const_5 ):
        print("n = ",n)
        print("Tau convexity = ", tau_test_convexity(G,n))

# Peterson Graph
if False:
    G = graphs.PetersenGraph()
    edge_num = len(G.edges())
    polys = PolynomialRing(QQ,edge_num,"z").fraction_field()
    z = polys.gens()
    S = {_sage_const_0 ,_sage_const_1 ,_sage_const_2 ,_sage_const_3 ,_sage_const_4 }
    for e in G.edges():
        u = e[_sage_const_0 ]
        v = e[_sage_const_1 ]
        if u in S and v in S:
            G.set_edge_label(u,v,z[_sage_const_0 ])
        elif not u in S and not v in S:
            G.set_edge_label(u,v,z[_sage_const_1 ])
        else:
            G.set_edge_label(u,v,_sage_const_1 /_sage_const_5  - z[_sage_const_1 ] - z[_sage_const_0 ])
    p = tau(G,polys)
    vars('x,y')
    f = p.substitute({z[_sage_const_0 ]:x, z[_sage_const_1 ]:y})
    graphic = contour_plot(f, (x,_sage_const_0 ,_sage_const_1 /_sage_const_5 ), (y,_sage_const_0 ,_sage_const_1 /_sage_const_5 ), fill=False,
                           region=_sage_const_1 /_sage_const_5 -x-y, plot_points=_sage_const_300 )
    show(graphic)

# Diamond Necklace
# Page 56 of Cinkir
if False:
    t = _sage_const_4 
    # polys = PolynomialRing(QQ,2,"z").fraction_field()
    # z = polys.gens()
    polys = QQ
    a = _sage_const_1 /_sage_const_100 
    b = _sage_const_1 /_sage_const_5  * (_sage_const_1  - t * a)
    es = []
    v = '00'
    vs = [v]
    for i in range(t - _sage_const_1 ):
        vs += [str(i) + '1', str(i) + '2', str(i) + '3']
        vs += [str(i + _sage_const_1 ) + '0']
        es += [(str(i) + '0', str(i) + '1', a),
               (str(i) + '1', str(i) + '2', b),
               (str(i) + '1', str(i) + '3', b),
               (str(i) + '2', str(i) + '3', b),
               (str(i + _sage_const_1 ) + '0', str(i) + '2', b),
               (str(i + _sage_const_1 ) + '0', str(i) + '3', b)]
    n = t - _sage_const_1 
    vs += [str(n) + '1', str(n) + '2', str(n) + '3']
    es += [(str(n) + '0', str(n) + '1', a),
           (str(n) + '1', str(n) + '2', b),
           (str(n) + '1', str(n) + '3', b),
           (str(n) + '2', str(n) + '3', b),
           ('00', str(n) + '2', b),
           ('00', str(n) + '3', b)]
    G = Graph(es)
    G.relabel()

# Coxeter Graph
if False:
    print("CoxeterGraph on 3 variables")
    G = graphs.CoxeterGraph()
    print(tau_test_convexity(G,_sage_const_3 ))

H = visualize(G)
show(H)

